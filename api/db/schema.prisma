// Don't forget to tell Prisma about your edits to this file using
// `yarn rw prisma migrate dev` or `yarn rw prisma db push`.
// `migrate` is like committing while `push` is for prototyping.
// Read more about both here:
// https://www.prisma.io/docs/orm/prisma-migrate

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL") // uses connection pooling
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

// Define your own datamodels here and run `yarn redwood prisma migrate dev`
// to create migrations for them and apply to your dev DB.
// TODO: Please remove the following example:
model Institution {
  id                 Int        @id @default(autoincrement())
  donations          Donation[]
  name               String?    @unique
  description        String?
  contactInformation String?
  logo               String?
  balance            Float      @default(0)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  isActive           Boolean    @default(true)
}

enum PaymentStatus {
  Pending
  Completed
  Cancelled
}

model UserBank {
  id        Int        @id @default(autoincrement())
  userId    Int
  user      User       @relation(fields: [userId], references: [id])
  donations Donation[]
  name      String
  balance   Float
  isActive  Boolean    @default(true)
}

model User {
  id        Int        @id @default(autoincrement())
  donations Donation[]
  user_bank UserBank[]
  name      String?
  age       Int?
  email     String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  isActive  Boolean    @default(true)
}

model Donation {
  id            Int           @id @default(autoincrement())
  institutionId Int
  institution   Institution   @relation(fields: [institutionId], references: [id])
  userId        Int
  user          User          @relation(fields: [userId], references: [id])
  userBankId    Int
  userBank      UserBank      @relation(fields: [userBankId], references: [id])
  amount        Float
  paymentMethod String
  paymentStatus PaymentStatus
  donationDate  DateTime      @default(now())
}
